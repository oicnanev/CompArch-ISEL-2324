P16 assembler v1.5 (Feb  9 2024)	c:\ac\CompArch-ISEL-2324\Assignments\Assignment_4\traffic_lights_v3.lst	Fri May 31 13:58:55 2024

Sections
Index   Name            Address   Size
0       startup         0000      0014 20
1       .text           0014      02C6 710
2       .data           02DA      0024 36
3       .stack          02FE      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      startup
BLINK_TIME              ABSOLUTE  0005 5      startup
check_pedestrian_button LABEL     01E0 480    .text
conf_first_time_on_phase LABEL     02FD 765    .data
conf_first_time_on_phase_addr LABEL     01A8 424    .text
conf_leds_phase         LABEL     02FC 764    .data
conf_leds_phase_addr    LABEL     01AC 428    .text
config_mode             LABEL     011A 282    .text
config_mode_end         LABEL     015A 346    .text
config_mode_leds_on_phase LABEL     0154 340    .text
config_mode_leds_phase_end LABEL     01A2 418    .text
config_mode_leds_phases LABEL     0168 360    .text
CONFIG_SW               ABSOLUTE  0010 16     startup
config_time_start_tick  LABEL     02FA 762    .data
config_time_start_tick_addr LABEL     01AA 426    .text
CPSR_BIT_I              ABSOLUTE  0010 16     startup
crossing_time           LABEL     02DE 734    .data
crossing_time_addr      LABEL     01DE 478    .text
crossing_time_addr0     LABEL     00D2 210    .text
crossing_time_start_tick LABEL     02F2 754    .data
crossing_time_start_tick_addr LABEL     0118 280    .text
crossing_times_array    LABEL     02E0 736    .data
crossing_times_array_addr LABEL     01DC 476    .text
end_operation_mode      LABEL     00CA 202    .text
first_time_on_op        LABEL     02F6 758    .data
get_config_sw           LABEL     01EA 490    .text
GREEN                   ABSOLUTE  0002 2      startup
in_config               LABEL     02F9 761    .data
in_config_addr          LABEL     0162 354    .text
in_config_addr0         LABEL     0098 152    .text
in_crossing             LABEL     02F0 752    .data
in_crossing_addr        LABEL     0166 358    .text
in_crossing_addr0       LABEL     00D0 208    .text
in_operation            LABEL     02F1 753    .data
in_operation_addr       LABEL     0164 356    .text
in_operation_addr0      LABEL     0096 150    .text
inport_addr             LABEL     025E 606    .text
INPORT_ADDRESS          ABSOLUTE  FF80 65408  startup
inport_read             LABEL     0258 600    .text
isr                     LABEL     01AE 430    .text
isr_addr                LABEL     0012 18     startup
led_on_phase            LABEL     008E 142    .text
LIGHT_OFF               ABSOLUTE  0000 0      startup
line#52                 LABEL     000C 12     startup
line#93                 LABEL     0036 54     .text
main                    LABEL     0014 20     .text
main_addr               LABEL     0010 16     startup
main_config_mode        LABEL     0032 50     .text
main_loop               LABEL     0024 36     .text
MODE_LIGHT              ABSOLUTE  0030 48     startup
mode_light_set_color    LABEL     0226 550    .text
not_first_time_in_config_mode LABEL     0144 324    .text
not_first_time_in_operation_mode LABEL     005C 92     .text
not_first_time_in_phase LABEL     0188 392    .text
not_first_time_on_op    LABEL     007E 126    .text
op_first_time_on_phase  LABEL     02F8 760    .data
op_first_time_on_phase_addr LABEL     0108 264    .text
op_first_time_on_phase_addr0 LABEL     009A 154    .text
op_led_phase            LABEL     02F7 759    .data
op_led_phase_addr       LABEL     010A 266    .text
op_led_phase_addr0      LABEL     009E 158    .text
op_not_first_time_in_phase LABEL     00E8 232    .text
operation_mode          LABEL     0038 56     .text
operation_mode_led_phases LABEL     00D4 212    .text
operation_mode_led_phases_end LABEL     0102 258    .text
operation_time_start_tick LABEL     02F4 756    .data
operation_time_start_tick_addr LABEL     0116 278    .text
operation_time_start_tick_addr0 LABEL     009C 156    .text
outport_addr            LABEL     02A4 676    .text
OUTPORT_ADDRESS         ABSOLUTE  FFC0 65472  startup
outport_clear_bits      LABEL     026E 622    .text
outport_img             LABEL     02DA 730    .data
outport_img_addr        LABEL     02A6 678    .text
outport_init            LABEL     027E 638    .text
outport_set_bits        LABEL     0260 608    .text
outport_write           LABEL     029A 666    .text
outport_write_bits      LABEL     0288 648    .text
pedestrian_ask_to_cross LABEL     00A0 160    .text
PEDESTRIAN_BUTTON       ABSOLUTE  0001 1      startup
pedestrian_crossing     LABEL     00B0 176    .text
PEDESTRIAN_LIGHT        ABSOLUTE  000C 12     startup
pedestrian_light_set_color LABEL     021A 538    .text
pedestrian_time_finished LABEL     00C6 198    .text
PTC_ADDR                LABEL     02D8 728    .text
ptc_addr                LABEL     01C4 452    .text
ptc_addr0               LABEL     02BA 698    .text
PTC_ADDRESS             ABSOLUTE  FF40 65344  startup
ptc_clr_irq             LABEL     02D2 722    .text
PTC_CMD_START           ABSOLUTE  0000 0      startup
PTC_CMD_STOP            ABSOLUTE  0001 1      startup
ptc_get_value           LABEL     02CC 716    .text
ptc_init                LABEL     02A8 680    .text
ptc_start               LABEL     02BC 700    .text
ptc_stop                LABEL     02C4 708    .text
PTC_TC                  ABSOLUTE  0004 4      startup
PTC_TCR                 ABSOLUTE  0000 0      startup
PTC_TIR                 ABSOLUTE  0006 6      startup
PTC_TMR                 ABSOLUTE  0002 2      startup
RED                     ABSOLUTE  0001 1      startup
set_crossing_time       LABEL     01C8 456    .text
STACK_SIZE              ABSOLUTE  0040 64     startup
stack_top               LABEL     033E 830    .stack
stack_top_addr          LABEL     000E 14     startup
start_pedestrian_timmer LABEL     010C 268    .text
sw_is_pressed           LABEL     01F4 500    .text
sw_is_pressed_0         LABEL     020A 522    .text
sw_is_pressed_end       LABEL     020C 524    .text
sw_state                LABEL     02DB 731    .data
sw_state_addr           LABEL     020E 526    .text
sysclk                  LABEL     02DC 732    .data
sysclk_addr             LABEL     0256 598    .text
sysclk_addr0            LABEL     01C6 454    .text
sysclk_elapsed          LABEL     024E 590    .text
SYSCLK_FREQ             ABSOLUTE  0063 99     startup
sysclk_get_ticks        LABEL     0248 584    .text
sysclk_init             LABEL     0232 562    .text
TIME_SWS                ABSOLUTE  00E0 224    startup
TRAFFIC_LIGHT           ABSOLUTE  0003 3      startup
traffic_light_set_color LABEL     0210 528    .text
YELLOW                  ABSOLUTE  0003 3      startup

Code listing
   1           	; Definicao dos valores dos simbolos utilizados no programa
   2          	    .equ    CPSR_BIT_I, 0b010000        ; Mascara para o bit I do registo CPSR
   3          	    .equ    STACK_SIZE, 64              ; Dimensao do stack - 64 B
   4           	
   5           	    ; Definicoes do porto de entrada    ----------------------------------------
   6          	    .equ    INPORT_ADDRESS, 0xFF80      ; Endereco do porto de entrada
   7          	    .equ    PEDESTRIAN_BUTTON, 0x01     ; Mascara para botão de peão
   8          	    .equ    CONFIG_SW, 0x10             ; Mascara para switch de CONFIG
   9          	    .equ    TIME_SWS, 0xE0              ; Mascara para Time
  10           	
  11           	    ; Definicoes do porto de saida      ----------------------------------------  
  12          	    .equ    OUTPORT_ADDRESS, 0xFFC0     ; Endereco do porto de saida
  13          	    .equ    TRAFFIC_LIGHT, 0x03         ; Mascara para semáforo de trânsito
  14          	    .equ    PEDESTRIAN_LIGHT, 0x0C      ; Mascara para semáforo de peões
  15          	    .equ    MODE_LIGHT, 0x30            ; Mascara para semáforo de modo
  16           	
  17           	    ; Definicoes do circuito pTC        ----------------------------------------
  18          	    .equ    PTC_ADDRESS,  0xFF40        ; Endereco do circuito pTC
  19          	    .equ    PTC_TCR, 0                  ; Deslocamento do registo TCR do pTC
  20          	    .equ    PTC_TMR, 2                  ; Deslocamento do registo TMR do pTC
  21          	    .equ    PTC_TC,  4                  ; Deslocamento do registo TC do pTC
  22          	    .equ    PTC_TIR, 6                  ; Deslocamento do registo TIR do pTC
  23          	    .equ    PTC_CMD_START, 0            ; Comando para iniciar a contagem no pTC
  24          	    .equ    PTC_CMD_STOP, 1             ; Comando para parar a contagem no pTC
  25          	    .equ    SYSCLK_FREQ, 0x63           ; Intervalo de contagem do circuito pTC
  26           	                                        ; que suporta a implementação do sysclk
  27           	                                        ; T = 1 / f  
  28           	                                        ; 0.001s = 1 / 1000Hz
  29           	                                        ; 0.1s   = 1 / f ( f = 10Hz )
  30           	                                        ; 1000Hz / 10Hz = 100Hz = 0x64
  31           	
  32           	    ; Outras definicoes                 ----------------------------------------
  33          	    .equ    BLINK_TIME, 0x05            ; Tempo dos LEDs intermitentes 
  34          	    .equ    RED, 0x01                   ; Mascara para o LED vermelho
  35          	    .equ    GREEN, 0x02                 ; Mascara para o LED verde
  36          	    .equ    YELLOW, 0x03                ; Mascara para o LED amarelo
  37          	    .equ    LIGHT_OFF, 0x00             ; Mascara para apagar os LEDs
  38           	 
  39           	
  40           	; ##############################################################################
  41           	; Seccao:    startup
  42           	; Descricao: Guarda o código de arranque do sistema
  43           	;
  44           	    .section startup
  45 0000 01 58	    b       _start
  46 0002 7F 0C	    ldr     pc, isr_addr
  47           	_start:
  48 0004 4D 0C	    ldr     sp, stack_top_addr
  49 0006 80 B7	    mov     r0, pc
  50 0008 0E A2	    add     lr, r0, #4
  51 000A 2F 0C	    ldr     pc, main_addr
  52 000C FF 5B	    b       .
  53           	
  54           	stack_top_addr:
  55 000E 3E 03	    .word   stack_top
  56           	main_addr:
  57 0010 14 00	    .word   main
  58           	isr_addr:
  59 0012 AE 01	    .word   isr
  60           	
  61           	; ##############################################################################
  62           	; Seccao:    text
  63           	; Descricao: Guarda o código do programa
  64           	;
  65           	    .text
  66           	
  67           	; Rotina:    main --------------------------------------------------------------
  68           	; Descricao: *** TODO ***
  69           	; Entradas:  -
  70           	; Saidas:    -
  71           	; Efeitos:   *** TODO ***
  72           	main:
  73 0014 00 60	    mov     r0, #0                      ; todos os LEDs apagados
  74 0016 33 5D	    bl      outport_init
  75 0018 30 66	    mov     r0, #SYSCLK_FREQ            ; frequencia para o pTC
  76 001A 0B 5D	    bl      sysclk_init
  77 001C 60 B0	    mrs     r0, cpsr                    ; habilitar interrupcoes
  78 001E 01 61	    mov     r1, #CPSR_BIT_I
  79 0020 80 C8	    orr     r0, r0, r1
  80 0022 40 B0	    msr     cpsr, r0
  81           	
  82           	main_loop:
  83 0024 E2 5C	    bl      get_config_sw              ; verificar a posicao do switch de mode
  84 0026 11 60	    mov     r1, #1 && 0xFF
  85 0028 01 70	    movt    r1, #1 >> 8 & 0xFF
  86 002A 80 B8	    cmp     r0, r1
  87 002C 02 40	    beq     main_config_mode
  88 002E 04 5C	    bl      operation_mode
  89 0030 F9 5B	    b       main_loop
  90           	main_config_mode:
  91 0032 73 5C	    bl      config_mode
  92 0034 F7 5B	    b       main_loop
  93 0036 FF 5B	    b       .
  94           	
  95           	; Rotina:    operation_mode ----------------------------------------------------
  96           	; Descricao: *** TODO ***
  97           	; Entradas:  -
  98           	; Saidas:    -
  99           	; Efeitos:   *** TODO ***
 100           	operation_mode:
 101 0038 0E 24	    push   lr
 102 003A 04 24	    push   r4
 103 003C 05 24	    push   r5
 104           	
 105           	    ; values 1 and 0 to use in flags to save clocks ---
 106 003E 04 60	    mov     r4, #0                              ; False
 107 0040 15 60	    mov     r5, #1                              ; True
 108           	
 109           	    ; check if is the first time in operation mode --------
 110 0042 90 0E	    ldr     r0, in_operation_addr0
 111 0044 01 08	    ldrb    r1, [r0, #0]
 112 0046 90 BA	    cmp     r1, r5
 113 0048 09 40	    beq     not_first_time_in_operation_mode
 114           	    ; set in_config to 0, in_operation to 1 and in_crossing to 0
 115 004A 05 28	    strb    r5, [r0, #0]                        ; in_operation = 1
 116 004C 50 0E	    ldr     r0, in_config_addr0
 117 004E 04 28	    strb    r4, [r0, #0]                        ; in_config = 0
 118 0050 F0 0F	    ldr     r0, in_crossing_addr0
 119 0052 04 28	    strb    r4, [r0, #0]                        ; in_crossing = 0
 120           	    ; set operation first time on phase to 1 -------------
 121 0054 20 0E	    ldr     r0, op_first_time_on_phase_addr0
 122 0056 05 28	    strb    r5, [r0, #0]                        ; op_first_time_on_phase = 1
 123           	    ; turn on mode light L3 to green ---------------------
 124 0058 21 60	    mov     r1, #GREEN
 125 005A E5 5C	    bl      mode_light_set_color
 126           	not_first_time_in_operation_mode:
 127           	    ; check if a pedestrian is crossing ------------------
 128 005C 90 0F	    ldr     r0, in_crossing_addr0
 129 005E 00 08	    ldrb    r0, [r0, #0]
 130 0060 80 BA	    cmp     r0, r5
 131 0062 26 40	    beq     pedestrian_crossing
 132           	    ; check if a pedestrian pressed the button to cross --
 133 0064 BD 5C	    bl      check_pedestrian_button
 134 0066 80 BA	    cmp     r0, r5
 135 0068 1B 40	    beq     pedestrian_ask_to_cross
 136           	    ; check if is the first time in operation mode --------
 137 006A 70 0D	    ldr     r0, op_first_time_on_phase_addr0
 138 006C 01 08	    ldrb    r1, [r0, #0]
 139 006E 10 BA	    cmp     r1, r4
 140 0070 06 40	    beq     not_first_time_on_op
 141           	    ; first time in operation mode to 0 ------------------
 142 0072 04 28	    strb    r4, [r0, #0]                        ; first_time_on_op = 0
 143           	    ; turn on pedestrian light L2 to red ------------------
 144 0074 11 60	    mov     r1, #RED
 145 0076 D1 5C	    bl      pedestrian_light_set_color
 146           	    ; start timer to turn ON/OFF L1 LED -------------------
 147 0078 E7 5C	    bl      sysclk_get_ticks                    ; get actual tick number to start timer
 148 007A 01 0D	    ldr     r1, operation_time_start_tick_addr0
 149 007C 10 20	    str     r0, [r1, #0]                        ; operation_time_start_tick = sysclk_get_ticks
 150           	not_first_time_on_op:
 151           	    ; check if L1 LED are in ON or OFF phase --------------
 152 007E F0 0C	    ldr     r0, op_led_phase_addr0
 153 0080 00 08	    ldrb    r0, [r0, #0]
 154 0082 80 BA	    cmp     r0, r5
 155 0084 04 40	    beq     led_on_phase
 156           	; leds are in OFF phase
 157 0086 00 60	    mov     r0, #LIGHT_OFF                      ; turn OFF traffic light
 158 0088 C3 5C	    bl      traffic_light_set_color
 159 008A 24 5C	    bl      operation_mode_led_phases
 160 008C 1E 58	    b       end_operation_mode
 161           	led_on_phase:
 162 008E 30 60	    mov     r0, #YELLOW                          ; turn ON traffic green
 163 0090 BF 5C	    bl      traffic_light_set_color
 164 0092 20 5C	    bl      operation_mode_led_phases
 165 0094 1A 58	    b       end_operation_mode
 166           	
 167           	in_operation_addr0:
 168 0096 F1 02	    .word   in_operation
 169           	
 170           	in_config_addr0:
 171 0098 F9 02	    .word   in_config
 172           	
 173           	op_first_time_on_phase_addr0:
 174 009A F8 02	    .word   op_first_time_on_phase
 175           	
 176           	operation_time_start_tick_addr0:
 177 009C F4 02	    .word operation_time_start_tick
 178           	
 179           	op_led_phase_addr0:
 180 009E F7 02	    .word op_led_phase
 181           	
 182           	pedestrian_ask_to_cross:
 183 00A0 10 60	    mov     r0, #RED
 184 00A2 B6 5C	    bl      traffic_light_set_color
 185 00A4 20 60	    mov     r0, #GREEN
 186 00A6 B9 5C	    bl      pedestrian_light_set_color
 187 00A8 30 0D	    ldr     r0, in_crossing_addr0
 188 00AA 05 28	    strb    r5, [r0, #0]                          ; R5 = 1, in_crossing = 1
 189 00AC 2F 5C	    bl      start_pedestrian_timmer
 190 00AE 0D 58	    b       end_operation_mode
 191           	
 192           	pedestrian_crossing:
 193           	    ; check if crossing time finished ---------------------
 194 00B0 30 0F	    ldr     r0, crossing_time_start_tick_addr
 195 00B2 00 00	    ldr     r0, [r0, #0]
 196 00B4 CC 5C	    bl      sysclk_elapsed
 197 00B6 D1 0C	    ldr     r1, crossing_time_addr0
 198 00B8 11 00	    ldr     r1, [r1, #0]
 199 00BA 80 B8	    cmp     r0, r1
 200 00BC 04 48	    bhs     pedestrian_time_finished
 201           	    ; check if anothers pedestrian pressed the button to cross
 202 00BE 90 5C	    bl      check_pedestrian_button
 203 00C0 80 BA	    cmp     r0, r5
 204 00C2 EE 43	    beq     pedestrian_ask_to_cross
 205 00C4 02 58	    b       end_operation_mode
 206           	pedestrian_time_finished:
 207 00C6 40 0C	    ldr     r0, in_crossing_addr0
 208 00C8 04 28	    strb    r4, [r0, #0]                          ; R4 = 0, in_crossing = 0
 209           	
 210           	end_operation_mode:
 211 00CA 05 04	    pop     r5
 212 00CC 04 04	    pop     r4
 213 00CE 0F 04	    pop     pc
 214           	    
 215           	in_crossing_addr0:  
 216 00D0 F0 02	    .word   in_crossing
 217           	
 218           	crossing_time_addr0:
 219 00D2 DE 02	    .word   crossing_time
 220           	
 221           	; Rotina:    operation_mode_led_phases ---------------------------------------
 222           	; Descricao : *** TODO ***
 223           	; Entradas  : R0 - cor a colocar no L1 (transito)
 224           	; Saidas    : -
 225           	; Efeitos   : -
 226           	operation_mode_led_phases:
 227 00D4 0E 24	    push    lr
 228 00D6 04 24	    push    r4
 229 00D8 05 24	    push    r5
 230           	
 231 00DA 04 60	    mov     r4, #0                              ; False
 232 00DC 15 60	    mov     r5, #1                              ; True
 233           	
 234 00DE 40 0D	    ldr     r0, op_first_time_on_phase_addr
 235 00E0 01 08	    ldrb    r1, [r0, #0]
 236 00E2 90 BA	    cmp     r1, r5
 237 00E4 01 44	    bne     op_not_first_time_in_phase
 238 00E6 14 28	    strb    r4, [r1, #0]                        ; set first_time_in_phase = False
 239           	    ;bl      traffic_light_set_color
 240           	op_not_first_time_in_phase:
 241 00E8 60 0D	    ldr     r0, operation_time_start_tick_addr
 242 00EA 00 00	    ldr     r0, [r0, #0]
 243 00EC B0 5C	    bl      sysclk_elapsed
 244 00EE 51 60	    mov     r1, #BLINK_TIME
 245 00F0 80 B8	    cmp     r0, r1
 246 00F2 07 4C	    blo     operation_mode_led_phases_end
 247 00F4 A0 0C	    ldr     r0, op_led_phase_addr
 248 00F6 01 08	    ldrb    r1, [r0, #0]
 249 00F8 91 B0	    mvn     r1, r1                              ; R1 = ~r1
 250 00FA 91 C2	    and     r1, r1, r5                          ; R1 = r1 & 1, mascara para ficar só com o último bit
 251 00FC 01 28	    strb    r1, [r0, #0]                        ; op_led_phase = r1
 252 00FE 40 0C	    ldr     r0, op_first_time_on_phase_addr
 253 0100 05 28	    strb    r5, [r0, #0]                        ; first_time_in_phase = True
 254           	operation_mode_led_phases_end:
 255 0102 05 04	    pop     r5
 256 0104 04 04	    pop     r4
 257 0106 0F 04	    pop     pc
 258           	
 259           	op_first_time_on_phase_addr:
 260 0108 F8 02	    .word   op_first_time_on_phase
 261           	
 262           	op_led_phase_addr:
 263 010A F7 02	    .word   op_led_phase
 264           	
 265           	; Rotina:    start_pedestrian_timmer ------------------------------------------------
 266           	; Descricao: Inicia a contagem do tempo de travessia.
 267           	; Entradas:  -
 268           	; Saidas:    -
 269           	; Efeitos:   crossing_time_start_tick = sysclk
 270           	start_pedestrian_timmer:
 271 010C 0E 24	    push    lr
 272 010E 9C 5C	    bl      sysclk_get_ticks
 273 0110 31 0C	    ldr     r1, crossing_time_start_tick_addr
 274 0112 10 20	    str     r0, [r1, #0]
 275 0114 0F 04	    pop     pc
 276           	
 277           	operation_time_start_tick_addr:
 278 0116 F4 02	    .word operation_time_start_tick
 279           	
 280           	crossing_time_start_tick_addr:
 281 0118 F2 02	    .word crossing_time_start_tick
 282           	
 283           	; Rotina:    config_mode -------------------------------------------------------
 284           	; Descricao: *** TODO ***
 285           	; Entradas:  -
 286           	; Saidas:    -
 287           	; Efeitos:   *** TODO ***
 288           	config_mode:
 289 011A 0E 24	    push    lr
 290 011C 04 24	    push    r4
 291 011E 05 24	    push    r5
 292           	
 293           	    ; values 1 and 0 to use in flags to save clocks ---
 294 0120 04 60	    mov     r4, #0                              ; False  
 295 0122 15 60	    mov     r5, #1                              ; True
 296           	
 297           	    ; check if is the first time in config mode --------
 298 0124 E0 0D	    ldr     r0, in_config_addr
 299 0126 01 08	    ldrb    r1, [r0, #0]
 300 0128 90 BA	    cmp     r1, r5
 301 012A 0C 40	    beq     not_first_time_in_config_mode
 302           	    ; set in_config to 1, in_operation to 0 and in_crossing to 0
 303 012C 05 28	    strb    r5, [r0, #0]                            ; in_config = 1     
 304 012E A0 0D	    ldr     r0, in_operation_addr
 305 0130 04 28	    strb    r4, [r0, #0]                        ; in_operation = 0
 306 0132 90 0D	    ldr     r0, in_crossing_addr
 307 0134 04 28	    strb    r4, [r0, #0]                        ; in_crossing = 0
 308           	    ; set config first time on phase to 1 -------------
 309 0136 80 0F	    ldr     r0, conf_first_time_on_phase_addr
 310 0138 05 28	    strb    r5, [r0, #0]                        ; conf_first_time_on_phase = 1
 311           	    ; turn on mode light L3 to yellow ------------------
 312 013A 30 60	    mov     r0, #YELLOW
 313 013C 74 5C	    bl      mode_light_set_color
 314           	    ; start timer to turn ON/OFF L1 and L2 LEDS ------------
 315 013E 84 5C	    bl      sysclk_get_ticks                    ; get actual tick number to start timer
 316 0140 41 0F	    ldr     r1, config_time_start_tick_addr
 317 0142 10 20	    str     r0, [r1, #0]                        ; config_time_start_tick = sysclk_get_ticks
 318           	not_first_time_in_config_mode:
 319           	    ; check if L1 and L2 LEDS are in ON or OFF phase ---
 320 0144 30 0F	    ldr     r0, conf_leds_phase_addr
 321 0146 00 08	    ldrb    r0, [r0, #0]
 322 0148 80 BA	    cmp     r0, r5
 323 014A 04 40	    beq     config_mode_leds_on_phase
 324           	; leds are in OFF phase
 325 014C 00 60	    mov     r0, #LIGHT_OFF                      ; turn OFF traffic light
 326 014E 01 60	    mov     r1, #LIGHT_OFF                      ; turn OFF pedestrian light
 327 0150 0B 5C	    bl      config_mode_leds_phases
 328 0152 03 58	    b       config_mode_end
 329           	config_mode_leds_on_phase:
 330           	    ; check if is first time in ON phase ---------------
 331 0154 30 60	    mov     r0, #YELLOW                         ; turn ON traffic yellow
 332 0156 21 60	    mov     r1, #GREEN                          ; turn ON pedestrian green
 333 0158 07 5C	    bl      config_mode_leds_phases
 334           	config_mode_end:
 335 015A 36 5C	    bl      set_crossing_time
 336 015C 05 04	    pop     r5
 337 015E 04 04	    pop     r4
 338 0160 0F 04	    pop     pc
 339           	
 340           	in_config_addr:
 341 0162 F9 02	    .word   in_config
 342           	in_operation_addr:
 343 0164 F1 02	    .word   in_operation
 344           	in_crossing_addr:    
 345 0166 F0 02	    .word   in_crossing
 346           	
 347           	; Rotina:    config_mode_leds_phases -------------------------------------------
 348           	; Descricao : *** TODO ***
 349           	; Entradas  : R0 - cor a colocar no L1 (transito)
 350           	;             R1 - cor a colocar no L2 (peoes)
 351           	; Saidas    : -
 352           	config_mode_leds_phases:
 353 0168 0E 24	    push    lr
 354 016A 04 24	    push    r4
 355 016C 05 24	    push    r5
 356           	
 357 016E 15 60	    mov     r5, #1                              ; True
 358           	
 359 0170 B3 0D	    ldr     r3, conf_first_time_on_phase_addr
 360 0172 32 08	    ldrb    r2, [r3, #0]
 361 0174 A0 BA	    cmp     r2, r5
 362 0176 08 44	    bne     not_first_time_in_phase  
 363 0178 84 B0	    mov     r4, r1                              ; R1 = cor a colocar no L2 (peoes), guardada em R4
 364 017A 4A 5C	    bl      traffic_light_set_color             ; R0 = cor a colocar no L1 (transito)
 365 017C 00 B2	    mov     r0, r4                              ; R0 = cor a colocar no L2 (peoes)
 366 017E 4D 5C	    bl      pedestrian_light_set_color
 367 0180 00 60	    mov     r0, #0 && 0xFF
 368 0182 00 70	    movt    r0, #0 >> 8 & 0xFF
 369 0184 13 0D	    ldr     r3, conf_first_time_on_phase_addr
 370 0186 30 28	    strb    r0, [r3, #0]                        ; set first_time_in_phase = False
 371           	not_first_time_in_phase:
 372 0188 00 0D	    ldr     r0, config_time_start_tick_addr
 373 018A 00 00	    ldr     r0, [r0, #0]
 374 018C 60 5C	    bl      sysclk_elapsed
 375 018E 51 60	    mov     r1, #BLINK_TIME
 376 0190 80 B8	    cmp     r0, r1
 377 0192 07 4C	    blo     config_mode_leds_phase_end
 378 0194 B0 0C	    ldr     r0, conf_leds_phase_addr
 379 0196 01 08	    ldrb    r1, [r0, #0]
 380 0198 91 B0	    mvn     r1, r1                              ; R1 = ~r1
 381 019A 91 C2	    and     r1, r1, r5                          ; R1 = r1 & 1, mascara para ficar só com o último bit
 382 019C 01 28	    strb    r1, [r0, #0]                        ; config_leds_on = r1
 383 019E 40 0C	    ldr     r0, conf_first_time_on_phase_addr
 384 01A0 05 28	    strb    r5, [r0, #0]                        ; first_time_in_phase = True
 385           	config_mode_leds_phase_end:
 386 01A2 05 04	    pop     r5
 387 01A4 04 04	    pop     r4
 388 01A6 0F 04	    pop     pc
 389           	
 390           	conf_first_time_on_phase_addr:
 391 01A8 FD 02	    .word   conf_first_time_on_phase
 392           	config_time_start_tick_addr:
 393 01AA FA 02	    .word   config_time_start_tick
 394           	conf_leds_phase_addr:
 395 01AC FC 02	    .word   conf_leds_phase
 396           	
 397           	; Rotina:    isr ---------------------------------------------------------------
 398           	; Descricao: Incrementa o valor da variável global sysclk.
 399           	; Entradas:  -
 400           	; Saidas:    -
 401           	; Efeitos:   Incrementa o valor da variável global sysclk
 402           	isr:
 403 01AE 00 24	    push    r0
 404 01B0 01 24	    push    r1
 405           	
 406           	    ; incrementar sysclk
 407 01B2 90 0C	    ldr     r0, sysclk_addr0
 408 01B4 01 08	    ldrb    r1, [r0, #0]
 409 01B6 91 A0	    add     r1, r1, #1
 410 01B8 01 28	    strb    r1, [r0, #0]
 411           	
 412           	    ; "limpar" a interrupção no pTC
 413 01BA 40 0C	    ldr     r0, ptc_addr
 414 01BC 01 2B	    strb    r1, [r0, #PTC_TIR]
 415           	
 416 01BE 01 04	    pop     r1
 417 01C0 00 04	    pop     r0
 418 01C2 20 B0	    movs    pc, lr
 419           	
 420           	ptc_addr:
 421 01C4 40 FF	    .word PTC_ADDRESS
 422           	
 423           	sysclk_addr0:
 424 01C6 56 02	    .word sysclk_addr
 425           	
 426           	; SERVICOS ####################################################################
 427           	; Rotina:    set_crossing_time ------------------------------------------------
 428           	; Descricao: Atribui o tempo de travessia especificado à variável crossing_time.
 429           	; Entradas:  -
 430           	; Saidas:    -
 431           	; Efeitos:   crossing_time = crossing_times_array[TIME_SWS]
 432           	set_crossing_time:
 433 01C8 0E 24	    push    lr
 434 01CA 11 60	    mov     r1, #TIME_SWS && 0xFF
 435 01CC 01 70	    movt    r1, #TIME_SWS >> 8 & 0xFF
 436 01CE 44 5C	    bl      inport_read
 437 01D0 82 C0	    and     r2, r0, r1                      ; selecionar apenas bits dos Time switches
 438 01D2 40 0C	    ldr     r0, crossing_times_array_addr   
 439 01D4 01 11	    ldr     r1, [r0, r2]                    ; transferir o valor da array de times, index = r2
 440 01D6 30 0C	    ldr     r0, crossing_time_addr
 441 01D8 01 20	    str     r1, [r0, #0]                    ; crossing_time = crossing_times_array[index]
 442 01DA 0F 04	    pop     pc
 443           	
 444           	crossing_times_array_addr:
 445 01DC E0 02	    .word crossing_times_array
 446           	
 447           	crossing_time_addr:
 448 01DE DE 02	    .word crossing_time
 449           	; Rotina:    check_pedestrian_button -------------------------------------------
 450           	; Descricao: Devolve se um peão pressionou o botão de peão.
 451           	; Entradas:  -
 452           	; Saidas:    R0 - 1 se o botão de peão foi pressionado, 0 caso contrário
 453           	; Efeitos:   -
 454           	check_pedestrian_button:
 455 01E0 0E 24	    push    lr
 456 01E2 3A 5C	    bl      inport_read
 457 01E4 11 60	    mov     r1, #PEDESTRIAN_BUTTON
 458 01E6 06 5C	    bl      sw_is_pressed
 459 01E8 0F 04	    pop     pc
 460           	
 461           	; Rotina:    get_config_sw -----------------------------------------------------
 462           	; Descricao: Devolve se um peão pressionou o botão de peão.
 463           	; Entradas:  -
 464           	; Saidas:    R0 - 1 se o botão de peão foi pressionado, 0 caso contrário
 465           	; Efeitos:   -
 466           	get_config_sw:
 467 01EA 0E 24	    push    lr
 468 01EC 35 5C	    bl      inport_read
 469 01EE 01 61	    mov     r1, #CONFIG_SW
 470 01F0 80 C0	    and     r0, r0, r1
 471 01F2 0F 04	    pop     pc
 472           	
 473           	; Rotina:    sw_is_pressed -----------------------------------------------------
 474           	; Descricao: Deteta se existiu uma transicao ascendente no bit identificado em 
 475           	;            IN_PEDESTRIAN_MASK.
 476           	; Entradas:  R0 - valor do porto de entrada
 477           	;            R1 - bit a analisar
 478           	; Saidas:    R0 - 1 se houve transicao ascendente, 0 caso contrario
 479           	; Efeitos:   -
 480           	sw_is_pressed:
 481 01F4 0E 24	    push    lr
 482 01F6 80 C0	    and     r0, r0, r1                  ; r0 = sw_new_state = inport_value & pin_mask
 483 01F8 A1 0C	    ldr     r1, sw_state_addr
 484 01FA 12 08	    ldrb    r2, [r1, #0]                ; r2 = sw_state
 485 01FC 00 B9	    cmp     r0, r2                      ; r0 = sw_new_state, r2 = sw_state
 486 01FE 05 40	    beq     sw_is_pressed_0
 487 0200 10 28	    strb    r0, [r1, #0]                ; sw_state = sw_new_state
 488 0202 00 A8	    sub     r0, r0, #0                  ; para testar a flag Z, sw_new_state == 0
 489 0204 02 40	    beq     sw_is_pressed_0             ; se Z = 1, então r0 = 0    
 490 0206 10 60	    mov     r0, #1
 491 0208 01 58	    b       sw_is_pressed_end
 492           	sw_is_pressed_0:
 493 020A 00 60	    mov     r0, #0
 494           	sw_is_pressed_end:
 495 020C 0F 04	    pop     pc
 496           	
 497           	sw_state_addr:
 498 020E DB 02	    .word sw_state
 499           	
 500           	; Rotina:    traffic_light_set_color -------------------------------------------
 501           	; Descricao: Atribui a cor especificada em R0 ao semáforo de trânsito (L1).
 502           	; Entradas:  R0 - Cor a atribuir ao semáforo de trânsito (L1)
 503           	; Saidas:    -
 504           	; Efeitos:   - 
 505           	traffic_light_set_color:
 506 0210 0E 24	    push    lr
 507 0212 01 B0	    mov     r1, r0                      ; r1 = color
 508 0214 30 60	    mov     r0, #TRAFFIC_LIGHT          ; r0 = TRAFFIC_LIGHT
 509 0216 38 5C	    bl      outport_write_bits
 510 0218 0F 04	    pop     pc
 511           	
 512           	; Rotina:    pedestrian_light_set_color ----------------------------------------
 513           	; Descricao: Atribui a cor especificada em R0 ao semáforo de peões (L2).
 514           	; Entradas:  R0 - Cor a atribuir ao semáforo de peões (L2)
 515           	; Saidas:    -
 516           	; Efeitos:   -
 517           	pedestrian_light_set_color:
 518 021A 0E 24	    push    lr
 519 021C 01 B0	    mov     r1, r0                      ; r1 = color
 520 021E C0 60	    mov     r0, #PEDESTRIAN_LIGHT       ; r0 = PEDESTRIAN_LIGHT
 521 0220 11 E1	    lsl     r1, r1, #2                  ; r1 = color << 2
 522 0222 32 5C	    bl      outport_write_bits
 523 0224 0F 04	    pop     pc
 524           	
 525           	; Rotina:    mode_light_set_color ----------------------------------------------
 526           	; Descricao: Atribui a cor especificada em R0 ao semáforo de modo (L3).
 527           	; Entradas:  R0 - Cor a atribuir ao semáforo de modo (L3)
 528           	; Saidas:    -
 529           	; Efeitos:   -
 530           	mode_light_set_color:
 531 0226 0E 24	    push    lr
 532 0228 01 B0	    mov     r1, r0                      ; r1 = color
 533 022A 00 63	    mov     r0, #MODE_LIGHT             ; r0 = MODE_LIGHT
 534 022C 11 E2	    lsl     r1, r1, #4                  ; r1 = color << 4
 535 022E 2C 5C	    bl      outport_write_bits
 536 0230 0F 04	    pop     pc
 537           	
 538           	; Rotina:    sysclk_init -------------------------------------------------------
 539           	; Descricao: Inicia uma nova contagem no periferico pTC com o intervalo de
 540           	;            contagem recebido em R0, em ticks, limpando eventuais pedidos de
 541           	;            interrupcao pendentes e iniciando com o valor zero a variavel
 542           	;            global sysclk.
 543           	;            Interface exemplo: void sysclk_init( uint8_t interval );
 544           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 545           	; Saidas:    -
 546           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 547           	;            eventuais pedidos de interrupcao pendentes e iniciando com o
 548           	;            valor zero a variavel global sysclk
 549           	sysclk_init:
 550 0232 0E 24	    push    lr
 551 0234 00 24	    push    r0              ; preservar valor dos ticks 
 552 0236 46 5C	    bl      ptc_stop        ; parar o ptc
 553 0238 4C 5C	    bl      ptc_clr_irq     ; limpar eventuais interrupts   
 554           	
 555           	    ; iniciar a varável sysclk a 0 -------------------------
 556 023A 00 60	    mov     r0, #0 && 0xFF
 557 023C 00 70	    movt    r0, #0 >> 8 & 0xFF
 558 023E B1 0C	    ldr     r1, sysclk_addr
 559 0240 10 20	    str     r0, [r1, #0]
 560           	    
 561 0242 00 04	    pop     r0              ; repor os ticks
 562 0244 31 5C	    bl      ptc_init
 563 0246 0F 04	    pop     pc
 564           	
 565           	; Rotina:    sysclk_get_ticks --------------------------------------------------
 566           	; Descricao: Devolve o valor corrente da variável global sysclk.
 567           	;            Interface exemplo: uint16_t sysclk_get_ticks ( );
 568           	; Entradas:  -
 569           	; Saidas:    R0 - valor da variável global sysclk
 570           	; Efeitos:   -
 571           	sysclk_get_ticks:
 572 0248 61 0C	    ldr     r1, sysclk_addr
 573 024A 10 00	    ldr     r0, [r1, #0]
 574 024C 0F B7	    mov     pc, lr
 575           	
 576           	; Rotina:    sysclk_elapsed ----------------------------------------------------
 577           	; Descricao: Devolve o tempo decorrido, em ticks, desde o instante last_read
 578           	; Entradas:  R0 - valor do instante last_read
 579           	; Saidas:    R0 - tempo decorrido, em ticks, desde o instante last_read
 580           	; Efeitos:   -
 581           	sysclk_elapsed:
 582 024E 31 0C	    ldr     r1, sysclk_addr
 583 0250 12 00	    ldr     r2, [r1, #0]            ; r2 = sysclk
 584 0252 20 88	    sub     r0, r2, r0
 585 0254 0F B7	    mov     pc, lr
 586           	
 587           	sysclk_addr:
 588 0256 DC 02	    .word sysclk
 589           	
 590           	; GESTORES DE PERIFÉRICOS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 591           	;
 592           	; Gestor de periférico para o porto de entrada =================================
 593           	;
 594           	; Rotina:    inport_read -------------------------------------------------------
 595           	; Descricao: Adquire e devolve o valor corrente do porto de entrada.
 596           	;            Interface exemplo: uint8_t inport_read( );
 597           	; Entradas:  -
 598           	; Saidas:    R0 - valor adquirido do porto de entrada
 599           	; Efeitos:   -
 600           	inport_read:
 601 0258 21 0C	    ldr     r1, inport_addr
 602 025A 10 08	    ldrb    r0, [r1, #0]
 603 025C 0F B7	    mov     pc, lr
 604           	
 605           	inport_addr:
 606 025E 80 FF	    .word   INPORT_ADDRESS
 607           	
 608           	; Gestor de periférico para o porto de saída ===================================
 609           	;
 610           	; Rotina:    outport_set_bits --------------------------------------------------
 611           	; Descricao: Atribui o valor logico 1 aos bits do porto de saida identificados
 612           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 613           	;            Interface exemplo: void outport_set_bits( uint8_t pins_mask );
 614           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 615           	; Saidas:    -
 616           	; Efeitos:   Altera o valor da variavel global outport_img.
 617           	outport_set_bits:
 618 0260 0E 24	    push    lr
 619 0262 11 0E	    ldr     r1, outport_img_addr
 620 0264 12 08	    ldrb    r2, [r1, #0]
 621 0266 20 C8	    orr     r0, r2, r0
 622 0268 10 28	    strb    r0, [r1, #0]
 623 026A 17 5C	    bl      outport_write
 624 026C 0F 04	    pop     pc
 625           	
 626           	; Rotina:    outport_clear_bits ------------------------------------------------
 627           	; Descricao: Atribui o valor logico 0 aos bits do porto de saida identificados
 628           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 629           	;            Interface exemplo: void outport_clear_bits( uint8_t pins_mask );
 630           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 631           	; Saidas:    -
 632           	; Efeitos:   Altera o valor da variavel global outport_img.
 633           	outport_clear_bits:
 634 026E 0E 24	    push    lr
 635 0270 A1 0D	    ldr     r1, outport_img_addr
 636 0272 12 08	    ldrb    r2, [r1, #0]
 637 0274 10 B0	    mvn     r0, r0
 638 0276 20 C0	    and     r0, r2, r0
 639 0278 10 28	    strb    r0, [r1, #0]
 640 027A 0F 5C	    bl      outport_write
 641 027C 0F 04	    pop     pc
 642           	
 643           	; Rotina:    outport_init ------------------------------------------------------
 644           	; Descricao: Faz a iniciacao do porto de saida, nele estabelecendo o valor
 645           	;            recebido em R0.
 646           	;            Interface exemplo: void outport_init( uint8_t value );
 647           	; Entradas:  R0 - Valor a atribuir ao porto de saida.
 648           	; Saidas:    -
 649           	; Efeitos:   Altera o valor da variavel global outport_img.
 650           	outport_init:
 651 027E 0E 24	    push    lr
 652 0280 21 0D	    ldr     r1, outport_img_addr
 653 0282 10 28	    strb    r0, [r1, #0]
 654 0284 0A 5C	    bl      outport_write
 655 0286 0F 04	    pop     pc
 656           	
 657           	; Rotina:    outport-write_bits ------------------------------------------------
 658           	; Descricao: Atribui aos pinos do porto de saida identificados com o valor 1 em
 659           	;            pin_mask (R0) o valor correspondente de value (R1). O valor dos
 660           	;            restantes bits nao e alterado.
 661           	; Entradas:  R0 - Mascara com os bits a alterar.
 662           	;            R1 - Valor a atribuir aos bits identificados em R0.
 663           	; Saidas:    -
 664           	; Efeitos:   Altera o valor da variavel global outport_img.
 665           	outport_write_bits:
 666 0288 0E 24	    push    lr
 667 028A 11 C0	    and     r1, r1, r0                  ; r1 = pin_mask & value
 668 028C C2 0C	    ldr     r2, outport_img_addr
 669 028E 23 08	    ldrb    r3, [r2, #0]
 670 0290 10 B0	    mvn     r0, r0                      ; r0 = ~pin_mask
 671 0292 83 C1	    and     r3, r0, r3                  ; r3 = outport_img &= ~pin_mask
 672 0294 B0 C8	    orr     r0, r3, r1                  ; r0 = outport_img |= pin_mask & value
 673 0296 01 5C	    bl      outport_write
 674 0298 0F 04	    pop     pc
 675           	
 676           	; Rotina:    outport_write -----------------------------------------------------
 677           	; Descricao: Escreve no porto de saida o valor recebido em R0.
 678           	;            Interface exemplo: void outport_write( uint8_t value );
 679           	; Entradas:  R0 - valor a atribuir ao porto de saida.
 680           	; Saidas:    -
 681           	; Efeitos:   -
 682           	outport_write:
 683 029A 41 0C	    ldr     r1, outport_addr
 684 029C 10 28	    strb    r0, [r1, #0]
 685 029E 32 0C	    ldr     r2, outport_img_addr
 686 02A0 20 28	    strb    r0, [r2, #0]
 687 02A2 0F B7	    mov     pc, lr
 688           	
 689           	outport_addr:
 690 02A4 C0 FF	    .word   OUTPORT_ADDRESS
 691           	
 692           	outport_img_addr:
 693 02A6 DA 02	    .word   outport_img
 694           	
 695           	; Gestor de periférico para o Pico Timer/Counter (pTC) =========================
 696           	;
 697           	; Rotina:    ptc_init ----------------------------------------------------------
 698           	; Descricao: Faz a iniciacao do periférico pTC, habilitando o seu funcionamento
 699           	;            em modo continuo e com o intervalo de contagem recebido em R0, em
 700           	;            ticks.
 701           	;            Interface exemplo: void ptc_init( uint8_t interval );
 702           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 703           	; Saidas:    -
 704           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 705           	;            o pedido de interrupcao eventualmente pendente.
 706           	ptc_init:
 707 02A8 0E 24	    push    lr
 708 02AA 00 24	    push    r0                  ; guardar o valor do intervalo
 709 02AC 0B 5C	    bl      ptc_stop
 710 02AE 00 04	    pop     r0                  ; recuperar o valor do intervalo
 711 02B0 41 0C	    ldr     r1, ptc_addr0
 712 02B2 10 29	    strb    r0, [r1, #PTC_TMR]
 713 02B4 0E 5C	    bl      ptc_clr_irq
 714 02B6 02 5C	    bl      ptc_start
 715 02B8 0F 04	    pop     pc
 716           	
 717           	ptc_addr0:
 718 02BA 40 FF	    .word   PTC_ADDRESS
 719           	
 720           	; Rotina:    ptc_start ---------------------------------------------------------
 721           	; Descricao: Habilita a contagem no periferico pTC.
 722           	;            Interface exemplo: void ptc_start( );
 723           	; Entradas:  -
 724           	; Saidas:    -
 725           	; Efeitos:   -
 726           	ptc_start:
 727 02BC D0 0C	    ldr     r0, PTC_ADDR
 728 02BE 01 60	    mov     r1, #PTC_CMD_START
 729 02C0 01 28	    strb    r1, [r0, #PTC_TCR]
 730 02C2 0F B7	    mov     pc, lr
 731           	
 732           	; Rotina:    ptc_stop ----------------------------------------------------------
 733           	; Descricao: Para a contagem no periferico pTC.
 734           	;            Interface exemplo: void ptc_stop( );
 735           	; Entradas:  -
 736           	; Saidas:    -
 737           	; Efeitos:   O valor do registo TC do periferico e colocado a zero.
 738           	ptc_stop:
 739 02C4 90 0C	    ldr     r0, PTC_ADDR
 740 02C6 11 60	    mov     r1, #PTC_CMD_STOP
 741 02C8 01 28	    strb    r1, [r0, #PTC_TCR]
 742 02CA 0F B7	    mov     pc, lr
 743           	
 744           	; Rotina:    ptc_get_value -----------------------------------------------------
 745           	; Descricao: Devolve o valor corrente da contagem do periferico pTC.
 746           	;            Interface exemplo: uint8_t ptc_get_value( );
 747           	; Entradas:  -
 748           	; Saidas:    R0 - O valor corrente do registo TC do periferico.
 749           	; Efeitos:   -
 750           	ptc_get_value:
 751 02CC 51 0C	    ldr     r1, PTC_ADDR
 752 02CE 10 0A	    ldrb    r0, [r1, #PTC_TC]
 753 02D0 0F B7	    mov     pc, lr
 754           	
 755           	; Rotina:    ptc_clr_irq -------------------------------------------------------
 756           	; Descricao: Sinaliza o periferico pTC que foi atendido um pedido de
 757           	;            interrupção.
 758           	;            Interface exemplo: void ptc_clr_irq( );
 759           	; Entradas:  -
 760           	; Saidas:    -
 761           	; Efeitos:   -
 762           	ptc_clr_irq:
 763 02D2 20 0C	    ldr     r0, PTC_ADDR
 764 02D4 01 2B	    strb    r1, [r0, #PTC_TIR]
 765 02D6 0F B7	    mov     pc, lr
 766           	
 767           	PTC_ADDR:
 768 02D8 40 FF	    .word   PTC_ADDRESS
 769           	
 770           	
 771           	; ##############################################################################
 772           	; Seccao:    data
 773           	; Descricao: Guarda as variáveis globais
 774           	;
 775           	    .data
 776           	outport_img:
 777 02DA 00   	    .space  1
 778           	
 779           	sw_state:
 780 02DB 00   	    .space  1
 781           	
 782           	sysclk:
 783 02DC 00   	    .space  2
 783 02DD 00
 784           	
 785           	; operation mode variables -----------------------------------------------------
 786           	crossing_time:
 787 02DE 64 00	    .word 100
 788           	
 789           	crossing_times_array:
 790          	    .word  100, 200, 300, 400, 500, 600, 600, 600 ; 1 tick = 100ms / 10 ticks = 1s
 790 02E0 64 00 C8 00 2C 01 90 01 F4 01 58 02 58 02 58 02
 791           	    ; hex: 063, 0C8, 12C, 190, 1F4, 258, 258, 258
 792           	
 793           	in_crossing:     ; flag para saber se ha peao a atravessar
 794 02F0 00	    .byte 0
 795           	
 796           	in_operation:    ; flag para saber se o modo de operacao esta ativo
 797 02F1 00	    .byte 0      ; 0 - 1a entrada em modo operação, 1 - reentradas vindas do main_loop
 798           	
 799           	crossing_time_start_tick: ; para ter o valor do tick em que o peao comecou a atravessar
 800 02F2 00   	    .space 2
 800 02F3 00
 801           	
 802           	operation_time_start_tick: ; para ter o valor do tick em que o semaforo de transito apagou ou acendeu
 803 02F4 00   	    .space 2
 803 02F5 00
 804           	
 805           	first_time_on_op:  ; flag para saber se e para acender ou nao o led dos peoes
 806 02F6 01	    .byte 1
 807           	
 808           	op_led_phase:      ; flag para saber se e para acender ou nao o led do transito
 809 02F7 01	    .byte 1
 810           	
 811           	op_first_time_on_phase: ; flag para saber se e a primeira vez que os leds estao acesos
 812 02F8 01	    .byte 1
 813           	
 814           	; config mode variables --------------------------------------------------------
 815           	in_config:       ; flag para saber se o modo de configuracao esta ativo
 816 02F9 00	    .byte 0      ; 0 - 1a entrada em modo operação, 1 - reentradas vindas do main_loop
 817           	
 818           	config_time_start_tick: ; para ter o valor do tick em que os semaforos apagaram ou acenderam
 819 02FA 00   	    .space 2
 819 02FB 00
 820           	
 821           	conf_leds_phase:  ; flag para saber se e para acender ou nao os leds
 822 02FC 01	    .byte 1
 823           	
 824           	conf_first_time_on_phase: ; flag para saber se e a primeira vez que os leds estao acesos
 825 02FD 01	    .byte 1
 826           	
 827           	; ##############################################################################
 828           	; Seccao:    stack
 829           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 830           	;
 831           	    .stack
 832 02FE 00   	    .space  STACK_SIZE
 832 .... ..
 832 033D 00
 833           	stack_top:
 833           	
