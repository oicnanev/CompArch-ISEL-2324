P16 assembler v1.5 (Feb  9 2024)	trab03inout.lst	Sat May 04 21:38:29 2024

Sections
Index   Name            Address   Size
0       startup         0000      0012 18
1       .text           0012      0066 102
2       .data           6000      000A 10
3       .stack          600A      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      startup
array                   LABEL     6002 24578  .data
array_addr              LABEL     003A 58     .text
IDX_MASK                ABSOLUTE  0038 56     startup
IN_ADDR                 ABSOLUTE  D000 53248  startup
inport_read             LABEL     0050 80     .text
line#30                 LABEL     0002 2      startup
line#37                 LABEL     000C 12     startup
loop                    LABEL     001A 26     .text
main                    LABEL     0012 18     .text
main_addr               LABEL     0010 16     startup
OUT_ADDR                ABSOLUTE  D000 53248  startup
OUT_MASK                ABSOLUTE  FF00 65280  startup
outport_clear_bits      LABEL     0066 102    .text
outport_img             LABEL     6000 24576  .data
outport_img_addr        LABEL     004E 78     .text
outport_img_address     LABEL     0076 118    .text
outport_init            LABEL     003C 60     .text
outport_set_bits        LABEL     0058 88     .text
outport_write           LABEL     0042 66     .text
STACK_SIZE              ABSOLUTE  0040 64     startup
stack_top               LABEL     604A 24650  .stack
stack_top_addr          LABEL     000E 14     startup

Code listing
   1           	;---------------------------------------------------------------------------------
   2           	; Ficheiro:  trab03inout.S
   3           	; Descricao: Programa desenvolvido para no ambito da questão 6 do trabalho prático 3
   4           	; Autores: Grupo 02 da turma 21N (45824 Nuno Venancio, 48070 Daniel Cabaça)     
   5           	; Data:      01-05-2024
   6           	; 
   7           	; IMPORTANTE:
   8           	; No assembler p16as.exe defenir o "address" da secção data para evitar conflitos
   9           	; p16as.exe -s .data=0x6000 trab03inout.S 
  10           	;
  11           	; No simulador, p16sim.exe
  12           	; p16sim.exe -c trab3.txt
  13           	;---------------------------------------------------------------------------------
  14           	
  15           	; ================================================================================
  16           	; Definicao dos valores dos simbolos utilizados no programa
  17           	
  18          	.equ	STACK_SIZE, 64		; Dimensao do stack
  19          	.equ 	IDX_MASK, 0x38		; InPort são apenas 8 bits
  20          	.equ 	OUT_MASK, 0xFF00
  21          	.equ 	IN_ADDR, 0xD000
  22          	.equ 	OUT_ADDR, 0xD000
  23           	
  24           	; ================================================================================
  25           	; Seccao:    startup
  26           	; Descricao: Guarda o código de arranque do sistema
  27           	
  28           		.section startup
  29 0000 01 58		b		_start
  30 0002 FF 5B		b		.
  31           	
  32           	_start:
  33 0004 4D 0C		ldr		SP, stack_top_addr
  34 0006 80 B7		mov		R0, PC
  35 0008 0E A2		add 	LR, R0, #4							; LR = PC + 4
  36 000A 2F 0C		ldr 	PC, main_addr
  37 000C FF 5B		b		.
  38           	
  39           	stack_top_addr:
  40 000E 4A 60		.word	stack_top
  41           	main_addr:
  42 0010 12 00		.word	main
  43           	
  44           	; ================================================================================
  45           	; Seccao:    text
  46           	; Descricao: Guarda o código do programa
  47           	
  48           		.text
  49           	;---------------------------------------------------------------------------------
  50           	; Rotina: main
  51           	; Descricao: Lê, continuamente, o estado do dispositivo INPORT e utiliza os bits 3 a 5
  52           	;            obtidos para definir a posição da variável 'array' que contém o valor a
  53           	; 			 afixar nos 8 bits de maior peso do dispositivo OUTPORT, mantendo inalterados
  54           	;            os valores dos 8 bits de menos peso.
  55           	; Entradas: 
  56           	; Saidas:
  57           	; Efeitos: 
  58           	;---------------------------------------------------------------------------------
  59           	main:
  60 0012 0E 24		push	LR
  61 0014 04 24		push 	R4
  62 0016 00 60		mov		R0, #0
  63 0018 11 5C		bl		outport_init
  64           	loop:
  65 001A 1A 5C		bl		inport_read				
  66 001C 81 63		mov		R1, #IDX_MASK & 0xFF
  67 001E 80 C0		and		R0, R0, R1
  68 0020 80 E9		lsr		R0, R0, #3
  69 0022 B1 0C		ldr		R1, array_addr
  70 0024 11 18		ldrb	R1, [R1, R0]
  71 0026 10 E4		lsl 	R0, R1, #8
  72 0028 04 B0		mov		R4, R0  			; save the value of R0
  73 002A 00 60		mov		R0, #OUT_MASK & 0xFF
  74 002C F0 7F		movt 	R0, #OUT_MASK>>8 & 0xFF
  75 002E 1B 5C		bl		outport_clear_bits
  76 0030 00 B2		mov 	R0, R4				; restore R0
  77 0032 12 5C		bl 		outport_set_bits
  78 0034 F2 5B		b 		loop
  79 0036 04 04		pop 	R4
  80 0038 0F 04		pop		PC
  81           	
  82           	array_addr:
  83 003A 02 60		.word array
  84           	
  85           	;---------------------------------------------------------------------------------
  86           	; Rotina: outport_init
  87           	; Descricao: Faz a iniciacao do sistema, atribuindo o valor value aos pinos do
  88           	; porto de saida .
  89           	; Entradas: Valor a escrever no porto
  90           	; Saidas:
  91           	; Efeitos: 
  92           	;---------------------------------------------------------------------------------
  93           	outport_init:
  94 003C 0E 24		push lr
  95 003E 01 5C		bl outport_write
  96 0040 0F 04		pop pc
  97           	
  98           	;---------------------------------------------------------------------------------	
  99           	; Rotina:    outport_write
 100           	; Descricao: Atribui aos pinos do porto de saida o valor dos bits correspondentes de value.
 101           	; Entradas:  Valor a escrever no porto
 102           	; Saidas:    
 103           	; Efeitos:   Atualiza o valor da variavel imagem do porto
 104           	;---------------------------------------------------------------------------------	
 105           	outport_write:
 106 0042 51 0C		ldr		r1, outport_img_addr
 107 0044 10 20		str 	r0, [r1, #0]						; nosso porto é de 16 bit
 108 0046 01 60		mov		r1, #OUT_ADDR & 0xFF
 109 0048 01 7D		movt	r1, #OUT_ADDR >>8 & 0xFF
 110 004A 10 20		str 	r0, [r1, #0]
 111 004C 0F B7		mov		pc, lr
 112           	
 113           	outport_img_addr:
 114 004E 00 60		.word	outport_img
 115           	
 116           	;---------------------------------------------------------------------------------	
 117           	; Rotina:    inport_read
 118           	; Descricao: Devolve o valor corrente do estado dos pinos do porto de entrada.
 119           	; Entradas:  
 120           	; Saidas:    Valor corrente do porto
 121           	; Efeitos:   
 122           	;---------------------------------------------------------------------------------	
 123           	inport_read:
 124 0050 00 60		mov		r0, #IN_ADDR & 0xFF
 125 0052 00 7D		movt	r0, #IN_ADDR>>8 & 0xFF
 126 0054 00 08		ldrb	r0, [r0, #0]					; nosso porto é de 8 bit
 127 0056 0F B7		mov		pc, lr
 128           	
 129           	;---------------------------------------------------------------------------------	
 130           	; Rotina:    outport_set_bits
 131           	; Descricao: Atribui o valor logico '1' aos pinos do porto de saida identificados 
 132           	;			 com o valor 1 no argumento passado a rotina. O estado dos restantes 
 133           	;			 bits nao e alterado.
 134           	; Entradas:  Mascara com os bits a alterar
 135           	; Saidas:    
 136           	; Efeitos:   Atualiza o valor da variavel imagem do porto
 137           	;---------------------------------------------------------------------------------	
 138           	outport_set_bits:
 139 0058 0E 24		push	lr
 140 005A D1 0C		ldr		r1, outport_img_address
 141 005C 12 00		ldr 	r2, [r1, #0]
 142 005E 20 C8		orr		r0, r2, r0
 143 0060 10 20		str 	r0, [r1, #0]
 144 0062 EF 5F		bl		outport_write
 145 0064 0F 04		pop		pc
 146           	
 147           	;---------------------------------------------------------------------------------	
 148           	; Rotina:    outport_clear_bits
 149           	; Descricao: Atribui o valor logico '0' aos pinos do porto de saida identificados 
 150           	;			 com o valor 1 no argumento passado a rotina. O estado dos restantes 
 151           	;			 bits nao e alterado.
 152           	; Entradas:  Mascara com os bits a alterar
 153           	; Saidas:    
 154           	; Efeitos:   Atualiza o valor da variavel imagem do porto
 155           	;---------------------------------------------------------------------------------	
 156           	outport_clear_bits:
 157 0066 0E 24		push	lr
 158 0068 61 0C		ldr		r1, outport_img_address
 159 006A 12 00		ldr 	r2, [r1, #0]
 160 006C 10 B0		mvn		r0, r0
 161 006E 20 C0		and		r0, r2, r0
 162 0070 10 20		str 	r0, [r1, #0]
 163 0072 E7 5F		bl		outport_write
 164 0074 0F 04		pop		pc
 165           	
 166           	outport_img_address:
 167 0076 00 60		.word	outport_img
 168           	
 169           	; ================================================================================
 170           	; Seccao:    data
 171           	; Descricao: Guarda as variáveis globais
 172           	
 173           		.data
 174           	outport_img:
 175 6000 00   		.space 2
 175 6001 00
 176           	array:
 177          		.byte 1, 2, 4, 8, 16, 32, 64, 128
 177 6002 01 02 04 08 10 20 40 80
 178           	
 179           	; ================================================================================
 180           	; Seccao:    stack
 181           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 182           	
 183           		.stack
 184 600A 00   		.space	STACK_SIZE
 184 .... ..
 184 6049 00
 185           	stack_top:
 185           	
