P16 assembler v1.5 (Feb  9 2024)	c:\ac\CompArch-ISEL-2324\Laboratorial activities\lab05\lab05_knight_rider.lst	Wed May 15 11:53:47 2024

Sections
Index   Name            Address   Size
0       startup         0000      0014 20
1       .text           0014      011C 284
2       .data           0130      000E 14
3       .stack          013E      0040 64

Symbols
Name                    Type      Value       Section
_start                  LABEL     0004 4      startup
BLINK_TIME              ABSOLUTE  0005 5      startup
CPSR_BIT_I              ABSOLUTE  0010 16     startup
delay                   LABEL     007A 122    .text
IN_7_MASK               ABSOLUTE  0080 128    startup
inport_addr             LABEL     00CA 202    .text
INPORT_ADDRESS          ABSOLUTE  FF80 65408  startup
inport_read             LABEL     00C4 196    .text
isr                     LABEL     008E 142    .text
isr_addr                LABEL     0012 18     startup
LED0_MASK               ABSOLUTE  0001 1      startup
led_rhythm              LABEL     0134 308    .data
led_rhythm_addr         LABEL     0074 116    .text
line#125                LABEL     0066 102    .text
line#57                 LABEL     000C 12     startup
main                    LABEL     0014 20     .text
main_addr               LABEL     0010 16     startup
main_loop               LABEL     0028 40     .text
main_set_bits           LABEL     005E 94     .text
outport_addr            LABEL     00FC 252    .text
OUTPORT_ADDRESS         ABSOLUTE  FFC0 65472  startup
outport_clear_bits      LABEL     00DA 218    .text
outport_img             LABEL     0130 304    .data
outport_img_addr        LABEL     00F4 244    .text
outport_img_addr_link   LABEL     0078 120    .text
outport_init            LABEL     00EA 234    .text
OUTPORT_INIT_VAL        ABSOLUTE  0000 0      startup
outport_set_bits        LABEL     00CC 204    .text
outport_write           LABEL     00F6 246    .text
ptc_addr                LABEL     00A4 164    .text
PTC_ADDR                LABEL     012E 302    .text
PTC_ADDRESS             ABSOLUTE  FF78 65400  startup
ptc_clr_irq             LABEL     0128 296    .text
PTC_CMD_START           ABSOLUTE  0000 0      startup
PTC_CMD_STOP            ABSOLUTE  0001 1      startup
ptc_get_value           LABEL     0122 290    .text
ptc_init                LABEL     00FE 254    .text
ptc_start               LABEL     0112 274    .text
ptc_stop                LABEL     011A 282    .text
PTC_TC                  ABSOLUTE  0004 4      startup
PTC_TCR                 ABSOLUTE  0000 0      startup
PTC_TIR                 ABSOLUTE  0006 6      startup
PTC_TMR                 ABSOLUTE  0002 2      startup
rhythm_img              LABEL     013C 316    .data
rhythm_img_addr         LABEL     0076 118    .text
RHYTHM_MASK             ABSOLUTE  0007 7      startup
set_new_rhythm          LABEL     0068 104    .text
STACK_SIZE              ABSOLUTE  0040 64     startup
stack_top               LABEL     017E 382    .stack
stack_top_addr          LABEL     000E 14     startup
sysclk                  LABEL     0132 306    .data
sysclk_addr             LABEL     00C2 194    .text
SYSCLK_FREQ             ABSOLUTE  000A 10     startup
sysclk_get_ticks        LABEL     00BC 188    .text
sysclk_init             LABEL     00A6 166    .text
while                   LABEL     0084 132    .text

Code listing
   1           	; Ficheiro:  ap05.S
   2           	; Descricao: Programa de suporte a realizacao da 5a atividade laboratorial de
   3           	;            Arquitetura de Computadores.
   4           	; Autor:     Tiago M Dias (tiago.dias@isel.pt)
   5           	; Data:      03-05-2024
   6           	
   7           	; ##############################################################################
   8           	; Definicao dos valores dos simbolos utilizados no programa
   9           	;
  10          		.equ	CPSR_BIT_I, 0b010000          ; Mascara para o bit I do registo CPSR
  11           	
  12          		.equ	STACK_SIZE, 64                ; Dimensao do stack - 64 B
  13           	
  14           		; Definicoes do porto de entrada
  15          		.equ	INPORT_ADDRESS, 0xFF80        ; Endereco do porto de entrada
  16           	
  17           		; Definicoes do porto de saida
  18          		.equ	OUTPORT_ADDRESS, 0xFFC0       ; Endereco do porto de saida
  19           	
  20          		.equ	OUTPORT_INIT_VAL, 0           ; Valor inicial do porto de saida
  21           	
  22           		; Definicoes do circuito pTC
  23          		.equ	PTC_ADDRESS,  0xFF78          ; Endereco do circuito pTC
  24           	
  25          		.equ	PTC_TCR, 0                    ; Deslocamento do registo TCR do pTC
  26          		.equ	PTC_TMR, 2                    ; Deslocamento do registo TMR do pTC
  27          		.equ	PTC_TC,  4                    ; Deslocamento do registo TC do pTC
  28          		.equ	PTC_TIR, 6                    ; Deslocamento do registo TIR do pTC
  29           	
  30          		.equ	PTC_CMD_START, 0              ; Comando para iniciar a contagem no pTC
  31          		.equ	PTC_CMD_STOP, 1               ; Comando para parar a contagem no pTC
  32           	
  33          		.equ	SYSCLK_FREQ, 0x0A             ; Intervalo de contagem do circuito pTC
  34           	                                          ; que suporta a implementação do sysclk
  35           											  ; T = 1 / f  
  36           											  ; 0.001s = 1 / 1000Hz
  37           											  ; 0.1s   = 1 / f ( f = 10Hz ) 
  38           	
  39           		; Outras definicoes
  40          		.equ	LED0_MASK, 1                  ; Mascara para o LED O0 da placa SDP16
  41          		.equ	BLINK_TIME, 5                 ; Número de interrupções a manter o LED no mesmo estado
  42          		.equ 	IN_7_MASK, 128				  ; Mascara para o interruptor 7 do DIP-switch
  43          		.equ 	RHYTHM_MASK, 0x07			  ; Mascara para ir buscar os bits 0 a 2 do inport
  44           	
  45           	; ##############################################################################
  46           	; Seccao:    startup
  47           	; Descricao: Guarda o código de arranque do sistema
  48           	;
  49           		.section startup
  50 0000 01 58		b		_start
  51 0002 7F 0C		ldr		pc, isr_addr
  52           	_start:
  53 0004 4D 0C		ldr		sp, stack_top_addr
  54 0006 80 B7	    mov 	r0, pc
  55 0008 0E A2	    add 	lr, r0, #4
  56 000A 2F 0C		ldr		pc, main_addr
  57 000C FF 5B	    b   	.
  58           	
  59           	stack_top_addr:
  60 000E 7E 01		.word	stack_top
  61           	main_addr:
  62 0010 14 00		.word	main
  63           	isr_addr:
  64 0012 8E 00		.word	isr
  65           	
  66           	; ##############################################################################
  67           	; Seccao:    text
  68           	; Descricao: Guarda o código do programa
  69           	;
  70           		.text
  71           	
  72           	; Rotina:    main --------------------------------------------------------------
  73           	; Descricao: *** Para completar ***
  74           	; Entradas:  -
  75           	; Saidas:    -
  76           	; Efeitos:   *** Para completar ***
  77           	main:
  78 0014 00 60		mov		r0, #OUTPORT_INIT_VAL
  79 0016 69 5C		bl		outport_init
  80 0018 A0 60		mov		r0, #SYSCLK_FREQ
  81 001A 45 5C		bl		sysclk_init
  82 001C 60 B0		mrs		r0, cpsr
  83 001E 01 61		mov		r1, #CPSR_BIT_I
  84 0020 80 C8		orr		r0, r0, r1
  85 0022 40 B0		msr		cpsr, r0
  86           	
  87           		; Após o arranque do sistema, o LED 'O0' deverá estar aceso, enquanto os 
  88           		; LED 'O1' a 'O7' deverão estar apagados.  
  89 0024 10 60		mov	r0, #LED0_MASK
  90 0026 52 5C		bl	outport_set_bits
  91           	
  92           	main_loop:
  93 0028 4D 5C		bl 		inport_read
  94 002A 01 68		mov 	r1, #IN_7_MASK
  95 002C 12 C0		and 	r2, r1, r0			  ; aplicar a máscara para ficar apenas com o 7 bit
  96 002E 10 B9		cmp 	r1, r2				  ; ver se o 7 bit está activo
  97 0030 FB 47		bne 	main_loop			  ; manter-se no main_loop
  98 0032 71 60		mov 	r1, #RHYTHM_MASK
  99 0034 82 C0		and 	r2, r0, r1			  ; ver quais os bits 0 a 3 ligados
 100 0036 E1 0D		ldr 	r1, led_rhythm_addr
 101 0038 10 19		ldrb  	r0, [r1, r2]		  ; ritmo do efeito luminoso
 102 003A D1 0D		ldr 	r1, rhythm_img_addr
 103 003C 11 08		ldrb 	r1, [r1, #0]		  ; ir buscar o ritmo anterior
 104 003E 80 B8		cmp 	r0, r1				  ; se o ritmo for diferente do anterior
 105 0040 05 B0		mov 	r5, r0 				  ; guardar o valor do ritmo
 106 0042 12 44		bne     set_new_rhythm        ; configurar e guardar imagem do novo ritmo
 107 0044 30 44		bne 	sysclk_init 		  ; configurar o sysclk com novo ritmo
 108 0046 80 0D		ldr 	r0, outport_img_addr_link  ; ir buscar o valor do bit acesso a outport_img
 109 0048 00 08		ldrb 	r0, [r0, #0]
 110 004A 04 B0		mov 	r4, r0				 ; guardar o valor do bit aceso 
 111 004C 46 5C		bl      outport_clear_bits   ; apagar o LED
 112 004E 15 5C		bl 		delay
 113 0050 00 B2		mov 	r0, r4 				 ; repor o valor do bit aceso
 114 0052 80 FB		ror 	r0, r0, #7 		     ; rotate right, inverse a rotate left (not in microarch)
 115 0054 01 60		mov 	r1, #0x00			 ; ver se o rotate right deixou o bit na parte alta
 116 0056 11 70		movt	r1, #0x01
 117 0058 80 B8		cmp 	r0, r1
 118 005A 01 4C		blo 	main_set_bits
 119 005C 00 EC		lsr		r0, r0, #8 			 ; meter o valor na parte baixa de r0
 120           	main_set_bits:
 121 005E 36 5C		bl 		outport_set_bits	 ; acender o novo LED
 122 0060 80 B2		mov 	r0, r5				 ; repor o valor do ritmo
 123 0062 0B 5C		bl 		delay
 124 0064 E1 5B		b 		main_loop
 125 0066 FF 5B		b 		.
 126           	
 127           	;Rotina set_new_rhythm ---------------------------------------------------------------------
 128           	; R0 tem o valor do novo ritmo
 129           	set_new_rhythm:
 130 0068 00 24		push 	r0
 131 006A 1D 58		b 	    sysclk_init
 132 006C 41 0C		ldr 	r1, rhythm_img_addr
 133 006E 00 04		pop 	r0
 134 0070 10 28		strb    r0,[r1, #0]
 135 0072 0F B7		mov 	pc, lr
 136           	
 137           	led_rhythm_addr:
 138 0074 34 01		.word led_rhythm
 139           	
 140           	rhythm_img_addr:
 141 0076 3C 01		.word rhythm_img
 142           	
 143           	outport_img_addr_link:
 144 0078 30 01		.word outport_img
 145           	
 146           	; Rotina:    delay -------------------------------------------------------------
 147           	; Descricao: Rotina bloqueante que realiza uma espera por teste sucessivo
 148           	;            do valor da variável global sysclk. O tempo a esperar, em
 149           	;            centenas de milissegundos, e passado em R0.
 150           	;            Interface exemplo: void delay( uint16_t hms );
 151           	; Entradas:  R0 - o tempo a esperar em centenas de milisegundos
 152           	; Saidas:    -
 153           	; Efeitos:   -
 154           	delay:
 155 007A 0E 24		push 	lr
 156 007C 04 24		push 	r4
 157 007E 04 B0		mov 	r4, r0				; preservar o tempo a esperar em cent. ms.
 158 0080 1D 5C		bl 		sysclk_get_ticks	; valor atual do sysclk
 159 0082 44 80		add 	r4, r4, r0			; somar o valor observado com o tempo a esperar
 160           	while:
 161 0084 1B 5C		bl 		sysclk_get_ticks	; reler o valor atual do sysclk
 162 0086 40 B8		cmp 	r4, r0				; comparar o valor lido com o valor limite
 163 0088 FD 4F		blo 	while				; voltar ao while
 164 008A 04 04		pop 	r4
 165 008C 0F 04		pop 	pc
 166           	
 167           	
 168           	; Rotina:    isr ---------------------------------------------------------------
 169           	; Descricao: Incrementa o valor da variável global sysclk.
 170           	; Entradas:  -
 171           	; Saidas:    -
 172           	; Efeitos:   Incrementa o valor da variável global sysclk
 173           	isr:
 174 008E 00 24		push	r0
 175 0090 01 24		push	r1
 176           	
 177           		; "limpar" a interrupção no pTC
 178 0092 80 0C		ldr		r0, ptc_addr
 179 0094 01 2B		strb	r1, [r0, #PTC_TIR]
 180           		; ---------------------------------
 181           	
 182           		; incrementar sysclk --------------
 183 0096 50 0D		ldr		r0, sysclk_addr
 184 0098 01 08		ldrb	r1, [r0, #0]
 185 009A 91 A0		add		r1, r1, #1
 186 009C 01 28		strb	r1, [r0, #0]
 187           		; ----------------------------------
 188           	
 189 009E 01 04		pop		r1
 190 00A0 00 04		pop		r0
 191 00A2 20 B0		movs	pc, lr
 192           	
 193           	ptc_addr:
 194 00A4 78 FF		.word PTC_ADDRESS
 195           	
 196           	; Rotina:    sysclk_init -------------------------------------------------------
 197           	; Descricao: Inicia uma nova contagem no periferico pTC com o intervalo de
 198           	;            contagem recebido em R0, em ticks, limpando eventuais pedidos de
 199           	;            interrupcao pendentes e iniciando com o valor zero a variavel
 200           	;            global sysclk.
 201           	;            Interface exemplo: void sysclk_init( uint8_t interval );
 202           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 203           	; Saidas:    -
 204           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 205           	;            eventuais pedidos de interrupcao pendentes e iniciando com o
 206           	;            valor zero a variavel global sysclk
 207           	sysclk_init:
 208 00A6 0E 24		push 	lr
 209 00A8 00 24		push 	r0 				; preservar valor dos ticks	
 210 00AA 37 5C		bl 		ptc_stop 		; parar o ptc
 211 00AC 3D 5C		bl 		ptc_clr_irq		; limpar eventuais interrupts	
 212           	
 213           		; iniciar a varável sysclk a 0 -------------------------
 214 00AE 00 60		mov 	r0, #0 && 0xFF
 215 00B0 00 70		movt 	r0, #0 >> 8 & 0xFF
 216 00B2 71 0C		ldr	 	r1, sysclk_addr
 217 00B4 10 20		str 	r0, [r1, #0]
 218           		; ------------------------------------------------------
 219           		
 220 00B6 00 04		pop 	r0 				; repor os ticks
 221 00B8 22 5C		bl 		ptc_init
 222 00BA 0F 04		pop 	pc
 223           	
 224           	; Rotina:    sysclk_get_ticks --------------------------------------------------
 225           	; Descricao: Devolve o valor corrente da variável global sysclk.
 226           	;            Interface exemplo: uint16_t sysclk_get_ticks ( );
 227           	; Entradas:  -
 228           	; Saidas:    R0 - valor da variável global sysclk
 229           	; Efeitos:   -
 230           	sysclk_get_ticks:
 231 00BC 21 0C		ldr     r1, sysclk_addr
 232 00BE 10 00		ldr 	r0, [r1, #0]
 233 00C0 0F B7		mov 	pc, lr
 234           	
 235           	sysclk_addr:
 236 00C2 32 01		.word sysclk
 237           	
 238           	; Gestor de periférico para o porto de entrada %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 239           	;
 240           	
 241           	; Rotina:    inport_read -------------------------------------------------------
 242           	; Descricao: Adquire e devolve o valor corrente do porto de entrada.
 243           	;            Interface exemplo: uint8_t inport_read( );
 244           	; Entradas:  -
 245           	; Saidas:    R0 - valor adquirido do porto de entrada
 246           	; Efeitos:   -
 247           	;
 248           	inport_read:
 249 00C4 21 0C		ldr		r1, inport_addr
 250 00C6 10 08		ldrb	r0, [r1, #0]
 251 00C8 0F B7		mov		pc, lr
 252           	
 253           	inport_addr:
 254 00CA 80 FF		.word	INPORT_ADDRESS
 255           	
 256           	; Gestor de periférico para o porto de saída %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 257           	;
 258           	
 259           	; Rotina:    outport_set_bits --------------------------------------------------
 260           	; Descricao: Atribui o valor logico 1 aos bits do porto de saida identificados
 261           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 262           	;            Interface exemplo: void outport_set_bits( uint8_t pins_mask );
 263           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 264           	; Saidas:    -
 265           	; Efeitos:   Altera o valor da variavel global outport_img.
 266           	;
 267           	outport_set_bits:
 268 00CC 0E 24		push	lr
 269 00CE 21 0D		ldr		r1, outport_img_addr
 270 00D0 12 08		ldrb	r2, [r1, #0]
 271 00D2 20 C8		orr		r0, r2, r0
 272 00D4 10 28		strb	r0, [r1, #0]
 273 00D6 0F 5C		bl		outport_write
 274 00D8 0F 04		pop		pc
 275           	
 276           	; Rotina:    outport_clear_bits ------------------------------------------------
 277           	; Descricao: Atribui o valor logico 0 aos bits do porto de saida identificados
 278           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 279           	;            Interface exemplo: void outport_clear_bits( uint8_t pins_mask );
 280           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 281           	; Saidas:    -
 282           	; Efeitos:   Altera o valor da variavel global outport_img.
 283           	;
 284           	outport_clear_bits:
 285 00DA 0E 24		push	lr
 286 00DC B1 0C		ldr		r1, outport_img_addr
 287 00DE 12 08		ldrb	r2, [r1, #0]
 288 00E0 10 B0		mvn		r0, r0
 289 00E2 20 C0		and		r0, r2, r0
 290 00E4 10 28		strb	r0, [r1]
 291 00E6 07 5C		bl		outport_write
 292 00E8 0F 04		pop		pc
 293           	
 294           	; Rotina:    outport_init ------------------------------------------------------
 295           	; Descricao: Faz a iniciacao do porto de saida, nele estabelecendo o valor
 296           	;            recebido em R0.
 297           	;            Interface exemplo: void outport_init( uint8_t value );
 298           	; Entradas:  R0 - Valor a atribuir ao porto de saida.
 299           	; Saidas:    -
 300           	; Efeitos:   Altera o valor da variavel global outport_img.
 301           	;
 302           	outport_init:
 303 00EA 0E 24		push	lr
 304 00EC 31 0C		ldr		r1, outport_img_addr
 305 00EE 10 28		strb	r0, [r1]
 306 00F0 02 5C		bl		outport_write
 307 00F2 0F 04		pop		pc
 308           	
 309           	outport_img_addr:
 310 00F4 30 01		.word	outport_img
 311           	
 312           	; Rotina:    outport_write -----------------------------------------------------
 313           	; Descricao: Escreve no porto de saida o valor recebido em R0.
 314           	;            Interface exemplo: void outport_write( uint8_t value );
 315           	; Entradas:  R0 - valor a atribuir ao porto de saida.
 316           	; Saidas:    -
 317           	; Efeitos:   -
 318           	;
 319           	outport_write:
 320 00F6 21 0C		ldr		r1, outport_addr
 321 00F8 10 28		strb	r0, [r1, #0]
 322 00FA 0F B7		mov		pc, lr
 323           	
 324           	outport_addr:
 325 00FC C0 FF		.word	OUTPORT_ADDRESS
 326           	
 327           	; Gestor de periférico para o Pico Timer/Counter (pTC) %%%%%%%%%%%%%%%%%%%%%%%%%
 328           	;
 329           	
 330           	; Rotina:    ptc_init ----------------------------------------------------------
 331           	; Descricao: Faz a iniciacao do periférico pTC, habilitando o seu funcionamento
 332           	;            em modo continuo e com o intervalo de contagem recebido em R0, em
 333           	;            ticks.
 334           	;            Interface exemplo: void ptc_init( uint8_t interval );
 335           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 336           	; Saidas:    -
 337           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 338           	;            o pedido de interrupcao eventualmente pendente.
 339           	;
 340           	ptc_init:
 341 00FE 0E 24	    push    lr
 342 0100 61 0D		ldr		r1, PTC_ADDR
 343 0102 12 60		mov		r2, #PTC_CMD_STOP
 344 0104 12 28		strb	r2, [r1, #PTC_TCR]
 345 0106 10 29		strb	r0, [r1, #PTC_TMR]
 346 0108 0F 5C	    bl  	ptc_clr_irq
 347 010A 11 0D		ldr 	r1, PTC_ADDR
 348 010C 02 60		mov		r2, #PTC_CMD_START
 349 010E 12 28		strb	r2, [r1, #PTC_TCR]
 350 0110 0F 04		pop 	pc
 351           	
 352           	; Rotina:    ptc_start ---------------------------------------------------------
 353           	; Descricao: Habilita a contagem no periferico pTC.
 354           	;            Interface exemplo: void ptc_start( );
 355           	; Entradas:  -
 356           	; Saidas:    -
 357           	; Efeitos:   -
 358           	;
 359           	ptc_start:
 360 0112 D0 0C		ldr		r0, PTC_ADDR
 361 0114 01 60		mov		r1, #PTC_CMD_START
 362 0116 01 28		strb	r1, [r0, #PTC_TCR]
 363 0118 0F B7		mov		pc, lr
 364           	
 365           	; Rotina:    ptc_stop ----------------------------------------------------------
 366           	; Descricao: Para a contagem no periferico pTC.
 367           	;            Interface exemplo: void ptc_stop( );
 368           	; Entradas:  -
 369           	; Saidas:    -
 370           	; Efeitos:   O valor do registo TC do periferico e colocado a zero.
 371           	;
 372           	ptc_stop:
 373 011A 90 0C		ldr		r0, PTC_ADDR
 374 011C 11 60		mov		r1, #PTC_CMD_STOP
 375 011E 01 28		strb	r1, [r0, #PTC_TCR]
 376 0120 0F B7		mov		pc, lr
 377           	
 378           	; Rotina:    ptc_get_value -----------------------------------------------------
 379           	; Descricao: Devolve o valor corrente da contagem do periferico pTC.
 380           	;            Interface exemplo: uint8_t ptc_get_value( );
 381           	; Entradas:  -
 382           	; Saidas:    R0 - O valor corrente do registo TC do periferico.
 383           	; Efeitos:   -
 384           	;
 385           	ptc_get_value:
 386 0122 51 0C		ldr		r1, PTC_ADDR
 387 0124 10 0A		ldrb	r0, [r1, #PTC_TC]
 388 0126 0F B7		mov		pc, lr
 389           	
 390           	; Rotina:    ptc_clr_irq -------------------------------------------------------
 391           	; Descricao: Sinaliza o periferico pTC que foi atendido um pedido de
 392           	;            interrupção.
 393           	;            Interface exemplo: void ptc_clr_irq( );
 394           	; Entradas:  -
 395           	; Saidas:    -
 396           	; Efeitos:   -
 397           	;
 398           	ptc_clr_irq:
 399 0128 20 0C		ldr		r0, PTC_ADDR
 400 012A 01 2B		strb	r1, [r0, #PTC_TIR]
 401 012C 0F B7		mov		pc, lr
 402           	
 403           	PTC_ADDR:
 404 012E 78 FF		.word	PTC_ADDRESS
 405           	
 406           	; ##############################################################################
 407           	; Seccao:    data
 408           	; Descricao: Guarda as variáveis globais
 409           	;
 410           		.data
 411           	outport_img:
 412 0130 00   		.space	1
 413           	
 414 0131 00  		.align
 415           	sysclk:
 416 0132 00   		.space	2
 416 0133 00
 417           	
 418           	led_rhythm:
 419          		.byte	5, 10, 15, 20, 25, 30, 35, 40
 419 0134 05 0A 0F 14 19 1E 23 28
 420           		; hex: 05, 0A, 0F, 14, 19, 1E, 25, 28
 421           	
 422           	rhythm_img:
 423 013C 00		.byte 0
 424           	
 425 013D 00  		.align
 426           	
 427           	; ##############################################################################
 428           	; Seccao:    stack
 429           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 430           	;
 431           		.stack
 432 013E 00   		.space	STACK_SIZE
 432 .... ..
 432 017D 00
 433           	stack_top:
 433           	
